# %%
import os
from urllib import response
import numpy as np
import pandas as pd
from pandas import Series, DataFrame
import seaborn as sns
import matplotlib.pyplot as plt
import requests
import datetime as dt
import time
import json

path = os.getcwd()
print(path)
# %%
data = pd.read_csv('/Users/abnerteng/GitHub/TMBA-projects/data/BTC_PERP.csv', parse_dates=True, index_col='startTime')
funding = pd.read_csv('/Users/abnerteng/GitHub/TMBA-projects/data/BTC_funding.csv', parse_dates=True, index_col='time')

# %%
API_KEY = '2CzAQPc12ITyBBrjUTI3fb63SBe'
merch = 'BTC'
on_chain = []
response = requests.get('https://api.glassnode.com/v1/metrics/institutions/purpose_etf_aum_sum', params = {'a': merch, 'api_key': API_KEY})
PEA = pd.read_json(response.text, convert_dates = ['t'])
PEA = PEA[:528]

# %%
rule = '1D'
d1 = data.resample(rule = rule, closed = 'right', label = 'right').first()[['open']]
d2 = data.resample(rule = rule, closed = 'right', label = 'right').max()[['high']]
d3 = data.resample(rule = rule, closed = 'right', label = 'right').min()[['low']]
d4 = data.resample(rule = rule, closed = 'right', label = 'right').last()[['close']]
d5 = data.resample(rule = rule, closed = 'right', label = 'right').sum()[['volume']]

df = pd.concat([d1, d2, d3, d4, d5], axis = 1)
df = df[49:]

# %%
fund = 10000
money = 10000
feeRate = 0.0015
length = 20
times_of_std = 2
df['ma'] = df['close'].rolling(window = length, center = False).mean()
df['std'] = df['close'].rolling(window = length, center = False).std()
df['shortSMA'] = df['close'].rolling(window = 13, center = False).mean()
df['longSMA'] = df['close'].rolling(window = 21, center = False).mean()

# %%
upper_bound_list = [0]
lower_bound_list = [0]
BBW_list = [0]
threshold_list = [0]
spread_list = [0]

for i in range(len(df)):
    upper_bound = df['ma'][i] + times_of_std * df['std'][i]
    upper_bound_list.append(upper_bound)

for i in  range(len(df)):
    lower_bound = df['ma'][i] - times_of_std * df['std'][i]
    lower_bound_list.append(lower_bound)

for i in range(len(df)):
    BBW = (upper_bound_list[i] - lower_bound_list[i]) / df['ma'][i]
    BBW_list.append(BBW)

for i in range(len(df)):
    threshold = 0.25
    threshold_list.append(threshold)

for i in range(len(df)):
    spread = df['shortSMA'][i] - df['shortSMA'][i-1]
    spread_list.append(spread)

BBdata = pd.DataFrame([upper_bound_list, lower_bound_list, BBW_list, threshold_list, spread_list])
BBdata = pd.DataFrame.transpose(BBdata)
BBdata.columns = ['upper_bound', 'lower_bound', 'BBW', 'threshold', 'spread']

BBdata = BBdata.drop(0)
BBdata = BBdata.set_index(df.index)

# %%
shortlength = 8
longlength = 34
PEA['shortSMA'] = PEA['v'].rolling(window = shortlength, center = False).mean()
PEA['longSMA'] = PEA['v'].rolling(window = longlength, center = False).mean()


PEA_spread_list = [0]
for i in range(1,len(PEA),1):
    PEA_spread = PEA['shortSMA'][i] - PEA['shortSMA'][i-1]
    PEA_spread_list.append(PEA_spread)

PEA['spread'] = PEA_spread_list
# %%
import mplfinance as mpf
candle_data = df[['open', 'high', 'low', 'close', 'volume']]
indicator = [ mpf.make_addplot(PEA['shortSMA'], color = 'red', ylabel = 'diff', panel = 1),
              mpf.make_addplot(PEA['longSMA'], color = 'green', panel = 1, secondary_y = False),
              mpf.make_addplot(BBdata['lower_bound'], color = 'blue'),
              mpf.make_addplot(BBdata['upper_bound'], color = 'blue'),
              mpf.make_addplot(df['ma'], color = 'gray'),
              mpf.make_addplot(BBdata['BBW'], panel = 2, ylabel = 'BBW'),
              mpf.make_addplot(BBdata['threshold'], panel = 2, secondary_y = False) ]
mpf.plot(data = candle_data, type = 'candle', style = 'binance', addplot = indicator, figratio = (18, 10), title = 'on-chain')
# %%
